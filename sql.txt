1)Creating Collections
=>CREATE TABLE Employees (
    EmployeeID VARCHAR(10) PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    DateOfBirth DATE NOT NULL,
    Department VARCHAR(50) NOT NULL
);
=>CREATE TABLE Orders(
    OrderID int(10) ,
    OrderDate DATE,
    CustomerID varchar(10),
    Amount Decimal(10),
    
);

2) Inserting Data into Collections
=>INSERT INTO Employees (EmployeeID, FirstName, LastName, DateOfBirth, Department)
VALUES ('1', 'Alice', 'Johnson', '1990-01-15', 'HR');
=>INSERT INTO Orders (OrderID, OrderDate, CustomerID, Amount)
VALUES 
    (1, '2024-10-01', 'C001', 150.50),
    (2, '2024-10-02', 'C002', 200.75),
    (3, '2024-10-03', 'C003', 320.00),
    (4, '2024-10-04', 'C004', 450.25),
    (5, '2024-10-05', 'C005', 275.60);

3. Selecting Data from Collections
=>select*from Employees
=>select*from Order
=>select Firstname,Lastname from Employees;
=>select OrderID,Amount from Orders;

4.Updating Data in a Collection
=>UPDATE Employees SET Department = 'Finance' WHERE EmployeeID = '1';
=>UPDATE Orders1 SET Amount = '500.00' WHERE OrderID = '2';

5. Deleting Data from a Collection
=>DELETE from Employees WHERE EmployeeID=1;
=>DELETE from Orders WHERE Amount<100;

6. Filtering Data with WHERE Clause
=>SELECT * FROM Employees WHERE Department = 'HR';
=>SELECT * FROM Orders WHERE AMOUNT>300;

7. Using AND / OR in Queries
=>SELECT * FROM Employees WHERE Department = 'HR' AND DateOfBirth > '1990-01-01';
=>SELECT * FROM Orders1 WHERE Amount > 300 AND OrderDate < '2023-01-01';
=>SELECT * FROM Employees WHERE Department IN ('HR', 'Finance');
=>SELECT * FROM Orders WHERE Amount < 100 OR OrderDate > '2023-01-01';

8. Sorting Results with ORDER BY
=>SELECT * FROM Employees ORDER BY LastName ASC;
=>SELECT * FROM Orders1 ORDER BY Amount DESC;

9. Using Aggregate Functions
=>SELECT COUNT(*) AS TotalEmployees FROM Employees;
=>SELECT COUNT(*) AS TotalOrders FROM Orders;
=>SELECT AVG(Amount) AS AverageAmount FROM Orders;
=>SELECT AVG(TIMESTAMPDIFF(YEAR, DateOfBirth, CURDATE())) AS AverageAge FROM Employees;

10. Grouping Data with GROUP BY
=>SELECT Department, COUNT(*) AS NumberOfEmployees
FROM Employees
GROUP BY Department;
=>SELECT CustomerID, SUM(OrderAmount) AS TotalOrderAmount
FROM Orders
GROUP BY CustomerID;

11. Using HAVING Clause
=>SELECT DepartmentID, COUNT(EmployeeID) AS NumberOfEmployees
FROM Employees
GROUP BY DepartmentID
HAVING COUNT(EmployeeID) > 5;
=>SELECT CustomerID, SUM(OrderAmount) AS TotalOrderAmount
FROM Orders
GROUP BY CustomerID
HAVING SUM(OrderAmount) > 1000;

12. Joining Collections
=>SELECT Employees.FirstName, Employees.LastName, Orders.OrderAmount
FROM Employees
INNER JOIN Orders ON Employees.CustomerID = Orders.CustomerID;
=>SELECT Employees.FirstName, Employees.LastName, Orders.OrderAmount
FROM Employees
LEFT JOIN Orders ON Employees.CustomerID = Orders.CustomerID;

PROJECT:

=>-- Create the Categories table
CREATE TABLE Categories (
    CategoryID INT PRIMARY KEY,
    CategoryName VARCHAR(50) NOT NULL
);

-- Create the Products table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100) NOT NULL,
    Price DECIMAL(10, 2) NOT NULL,
    QuantityInStock INT NOT NULL,
    CategoryID INT,
    FOREIGN KEY (CategoryID) REFERENCES Categories(CategoryID)
);

-- Create the Customers table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    FirstName VARCHAR(50) NOT NULL,
    LastName VARCHAR(50) NOT NULL,
    Email VARCHAR(100),
    Phone VARCHAR(15),
    Address VARCHAR(255)
);

-- Create the Orders table
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE NOT NULL,
    Status VARCHAR(20),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- Create the OrderDetails table
CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    Quantity INT NOT NULL,
    TotalAmount DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

=>Insert products with details like ProductID, Name, Price, and Category:
-- Insert sample categories
INSERT INTO Categories (CategoryID, CategoryName)
VALUES
    (1, 'Electronics'),
    (2, 'Footwear'),
    (3, 'Books & E-readers'),
    (4, 'Computers'),
    (5, 'Audio'),
    (6, 'Accessories');

-- Insert sample products
INSERT INTO Products (ProductID, ProductName, Price, QuantityInStock, CategoryID)
VALUES
    (1, 'Apple iPhone 14', 999.99, 50, 1),
    (2, 'Samsung Galaxy S22', 899.99, 30, 1),
    (3, 'Sony WH-1000XM4 Headphones', 349.99, 100, 5),
    (4, 'Dell XPS 13 Laptop', 1199.99, 20, 4),
    (5, 'Nike Air Max 270', 149.99, 200, 2),
    (6, 'Adidas Ultraboost', 179.99, 150, 2),
    (7, 'Logitech MX Master 3 Mouse', 99.99, 75, 6),
    (8, 'Kindle Paperwhite', 129.99, 40, 3);

=>Query to select all orders placed by a specific customer:
SELECT Orders.OrderID, Orders.OrderDate, Orders.Status, OrderDetails.ProductID, OrderDetails.Quantity, OrderDetails.TotalAmount
FROM Orders
INNER JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID
WHERE Orders.CustomerID = 1;  -- Replace 1 with the specific CustomerID

=>Update the order status after a payment is made:
UPDATE Orders
SET Status = 'Paid'
WHERE OrderID = 1;  -- Replace 1 with the specific OrderID

=>Delete orders that have been canceled:
DELETE FROM Orders
WHERE Status = 'Canceled';

=>Filter products based on category and price range:
SELECT ProductID, ProductName, Price, QuantityInStock
FROM Products
WHERE CategoryID = 1 AND Price BETWEEN 100 AND 1000;  -- Replace 1 with the specific CategoryID and adjust the price range

=>Use AND/OR to filter products by stock availability and price range:
SELECT ProductID, ProductName, Price, QuantityInStock
FROM Products
WHERE (QuantityInStock > 0 AND Price < 500)
   OR (QuantityInStock = 0 AND Price > 500);

=>Sort products by price or popularity:
-- Sort products by price in ascending order
SELECT ProductID, ProductName, Price
FROM Products
ORDER BY Price ASC;

-- Assuming popularity is determined by the number of orders, sort by popularity
SELECT Products.ProductID, Products.ProductName, Products.Price, COUNT(OrderDetails.OrderID) AS Popularity
FROM Products
LEFT JOIN OrderDetails ON Products.ProductID = OrderDetails.ProductID
GROUP BY Products.ProductID, Products.ProductName, Products.Price
ORDER BY Popularity DESC;

=>Use aggregate functions to find the average order value:
SELECT AVG(TotalAmount) AS AverageOrderValue
FROM OrderDetails;

=>Group orders by customer and count the number of orders per customer:
SELECT Customers.CustomerID, Customers.FirstName, Customers.LastName, COUNT(Orders.OrderID) AS NumberOfOrders
FROM Customers
INNER JOIN Orders ON Customers.CustomerID = Orders.CustomerID
GROUP BY Customers.CustomerID, Customers.FirstName, Customers.LastName;










